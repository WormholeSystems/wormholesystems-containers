services:
  application:
    image: application
    build:
      context: .
      dockerfile: dockerfiles/php/php.dockerfile
    volumes:
      - ./wormhole-systems:/var/www/html:delegated
  mysql:
    build:
      context: .
      dockerfile: dockerfiles/mysql/mysql.dockerfile
    volumes:
      - mysql-data:/var/lib/mysql
    env_file:
      - dockerfiles/mysql/.env
  redis:
    build:
      context: .
      dockerfile: dockerfiles/redis/redis.dockerfile
  composer:
    build:
      context: .
      dockerfile: dockerfiles/composer/composer.dockerfile
    volumes:
      - ./wormhole-systems:/var/www/html
  npm:
    image: application
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./wormhole-systems:/var/www/html
    depends_on:
      - application
  server:
    build:
      context: .
      dockerfile: dockerfiles/server/nginx.dockerfile
    ports:
      - "3000:80"
    volumes:
      - ./wormhole-systems:/var/www/html
      - ./dockerfiles/server/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - application
      - mysql
      - redis
  artisan:
    image: application
    working_dir: /var/www/html
    entrypoint: ["php","-d", "memory_limit=-1", "artisan"]
    volumes:
      - ./wormhole-systems:/var/www/html:delegated
    depends_on:
      - application
  queue:
    image: application
    tty: true
    volumes:
      - ./wormhole-systems:/var/www/html:delegated
    working_dir: /var/www/html
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    restart: always
    depends_on:
      - application
  scheduler:
    image: application
    tty: true
    volumes:
      - ./wormhole-systems:/var/www/html:delegated
    working_dir: /var/www/html
    command: php artisan schedule:work
    restart: always
    depends_on:
      - application
  reverb:
    image: application
    working_dir: /var/www/html
    tty: true
    volumes:
      - ./wormhole-systems:/var/www/html:delegated
    depends_on:
      - application
    command: php artisan reverb:start
  traefik:
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
volumes:
  mysql-data:
